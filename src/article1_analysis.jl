#=
Цель source-файла: определение функций, которые понядобятся для анализа системы ДУ
=#

#########################################################################################

function f(u)
    return -u*(u+a)*(u-a)*(u+b)*(u-b)*(u+c)*(u-c)
end

function f(u,a,b,c)
    return -u*(u+a)*(u-a)*(u+b)*(u-b)*(u+c)*(u-c)
end

function f_deriv(u)
    a², b², c² = a^2, b^2, c^2
    return a²*b²*c² - 3*(a²*b²+a²*c²+b²*c²)*u^2 + 5*(a²+b²+c²)*u^4 - 7*u^6
end

function ∂F₁_∂U_at_eq(J)
    return f_deriv(J)
end

function ∂²F₁_∂U²_at_eq(J)
    a², b², c² = a^2, b^2, c^2
    return -6*(a²*b²+a²*c²+b²*c²)*J + 20*(a²+b²+c²)*J^3 - 42*J^5
end

function ∂³F₁_∂U³_at_eq(J)
    a², b², c² = a^2, b^2, c^2
    return -6*(a²*b²+a²*c²+b²*c²) + 60*(a²+b²+c²)*J^2 - 210*J^4
end

#########################################################################################

λ₁(γ, ε) = 0.5 * (γ + sqrt(complex(γ^2-4ε)))
λ₂(γ, ε) = 0.5 * (γ - sqrt(complex(γ^2-4ε)))
λ₃(γ, ε, d) = 0.5 * ((γ-2d) + sqrt(complex((γ-2d)^2-4ε)))
λ₄(γ, ε, d) = 0.5 * ((γ-2d) - sqrt(complex((γ-2d)^2-4ε)))

λ₁(J) = λ₁(∂F₁_∂U_at_eq(J), ε)
λ₂(J) = λ₂(∂F₁_∂U_at_eq(J), ε)
λ₃(J, d) = λ₃(∂F₁_∂U_at_eq(J), ε, d)
λ₄(J, d) = λ₄(∂F₁_∂U_at_eq(J), ε, d)

# Reλ₁(γ, ε) = (γ^2-4ε>0) ? 0.5*(γ+sqrt(γ^2-4ε)) : 0.5*γ
# Reλ₂(γ, ε) = (γ^2-4ε>0) ? 0.5*(γ-sqrt(γ^2-4ε)) : 0.5*γ
# Imλ₁(γ, ε) = (γ^2-4ε>0) ? 0 : 0.5*sqrt(4ε-γ^2)
# Imλ₂(γ, ε) = (γ^2-4ε>0) ? 0 : -0.5*sqrt(4ε-γ^2)

# Reλ₁(J) = Reλ₁(∂F₁_∂U_at_eq(J), ε)
# Reλ₂(J) = Reλ₂(∂F₁_∂U_at_eq(J), ε)
# Imλ₁(J) = Imλ₁(∂F₁_∂U_at_eq(J), ε)
# Imλ₂(J) = Imλ₂(∂F₁_∂U_at_eq(J), ε)

#########################################################################################

function first_Lyapunov_quantity(J)
    A = ∂F₁_∂U_at_eq(J)
    B = -1
    C = ε
    a₂₀ = ∂²F₁_∂U²_at_eq(J)
    a₃₀ = ∂³F₁_∂U³_at_eq(J)
    q = -B*C
    return -π/(4*B*q*sqrt(q)) * (-2*A*B*(a₂₀^2) - (A^2 + B*C)*3*(-B*a₃₀))
end